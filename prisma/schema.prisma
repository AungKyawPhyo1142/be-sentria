datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                Int       @id @default(autoincrement())
    email             String    @unique
    email_verified    Boolean   @default(false)
    email_verified_at DateTime?
    verified_profile  Boolean   @default(false)
    birthday          DateTime
    country           String    @default("")
    firstName         String
    lastName          String
    username          String    @unique
    profile_image     String?
    password          String
    created_at        DateTime  @default(now())
    updated_at        DateTime  @updatedAt
    deleted_at        DateTime?

    //Relations

    reports        Report[]        @relation("GeneratedByUser")
    reportVotes    ReportVote[]
    reportComments ReportComment[]
    Report         Report[]
}

enum ReportStatus {
    PENDING
    PROCESSING
    AWAITING_DETAILS
    COMPLETED
    FAILED
}

enum ReportType {
    USER_LIST
    DISASTER_INCIDENT
}

model Report {
    id         String       @id @default(cuid())
    reportType ReportType
    name       String
    parameters Json?
    status     ReportStatus @default(PENDING)

    externalStorageId String? @unique // mongoDB document id
    errorMessage      String?

    generatedById Int?
    generatedBy   User? @relation("GeneratedByUser", fields: [generatedById], references: [id], onDelete: SetNull) // user who generated the report, set to null if user is deleted

    created_at   DateTime  @default(now())
    updated_at   DateTime  @updatedAt
    completed_at DateTime?

    // denormalized counts for quick access, updated by application logic
    upvoteCount   Int @default(0)
    downvoteCount Int @default(0)
    commentCount  Int @default(0)

    // relations
    votes    ReportVote[]
    comments ReportComment[]
    User     User?           @relation(fields: [userId], references: [id])
    userId   Int?

    @@index([generatedById])
    @@index([status])
    @@index([reportType])
    @@index([externalStorageId])
}

enum VoteType {
    UPVOTE
    DOWNVOTE
}

model ReportVote {
    id       String   @id @default(cuid())
    voteType VoteType

    userId   Int
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    reportId String
    report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@unique([userId, reportId])
    @@index([reportId, userId])
}

model ReportComment {
    id        String  @id @default(cuid())
    content   String  @db.Text
    isEdited  Boolean @default(false)
    isDeleted Boolean @default(false) // For soft deletion of comments

    userId Int
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade) // If user deleted, their comments are removed

    reportId String
    report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade) // If report deleted, comments for it are removed

    // For threaded comments/replies
    parentId String?
    parent   ReportComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // NoAction to prevent cycles or accidental mass deletes
    replies  ReportComment[] @relation("Replies")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([reportId, createdAt])
    @@index([parentId])
}
